@model WebApp.Models.ViewModel.VMExhibitionRoom
@{
    Layout = "_LayoutEditor";
	var ExhRoom = Model.ExhibitionRoom;
}
<input type="hidden" id="idmodel" value="@ExhRoom.Id"></input>
<input id="File3D" type="hidden" value="/File3D/@ExhRoom.File3D"></input>
<script type="importmap">
		{
			"imports": {
				"three": "/threejs/build/three.module.js",
				"three/addons/": "/threejs/examples/jsm/"
			}
		}
</script>
<script type="module">
		import * as THREE from 'three';
		import { Editor } from '/threejs/editor/js/Editor.js';
		import { Viewport } from '/threejs/editor/js/Viewport.js';
		import { Toolbar } from '/threejs/editor/js/Toolbar.js';
		import { Script } from '/threejs/editor/js/Script.js';
		import { Player } from '/threejs/editor/js/Player.js';
		import { Sidebar } from '/threejs/editor/js/Sidebar.js';
		import { Menubar } from '/threejs/editor/js/Menubar.js';
		import { Resizer } from '/threejs/editor/js/Resizer.js';
		import { VRButton } from '/threejs/examples/jsm/webxr/VRButton.js';
		import { GLTFLoader } from '/threejs/examples/jsm/loaders/GLTFLoader.js';

		window.URL = window.URL || window.webkitURL;
		window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;

		Number.prototype.format = function () {

			return this.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');

		};

		const editor = new Editor();

		window.editor = editor; // Expose editor to Console
		window.THREE = THREE; // Expose THREE to APP Scripts and Console
		window.VRButton = VRButton; // Expose VRButton to APP Scripts

		const viewport = new Viewport(editor);
		document.body.appendChild(viewport.dom);

		const toolbar = new Toolbar(editor);
		document.body.appendChild(toolbar.dom);

		const script = new Script(editor);
		document.body.appendChild(script.dom);

		const player = new Player(editor);
		document.body.appendChild(player.dom);

		const sidebar = new Sidebar(editor);
		document.body.appendChild(sidebar.dom);

		const menubar = new Menubar(editor);
		document.body.appendChild(menubar.dom);

		const resizer = new Resizer(editor);
		document.body.appendChild(resizer.dom);

		const File3D = $('#File3D').val();
		const IdModel = $('#idmodel').val();

		var found = false;
		var loaderFile = new GLTFLoader();
		editor.storage.init(function () {
			editor.storage.getAll(function(state) {
				//console.log(state);
                     state.forEach(key => { 
                         if (key == IdModel) {
                             found = true;
							//console.log(IdModel);

                          		editor.storage.getObject(key,function (state) {
								if (isLoadingFromHash) return;

								if (state !== undefined) {
									editor.fromJSON(state);
									console.log(state)

								}
								//console.log(editor.objectByName("Scene"));

								const selected = editor.config.getKey('selected');

								if (selected !== undefined) {

									editor.selectByUuid(selected);
									//console.log(selected)
								}
							});	
                         }
					 })
                     if (!found) {
                        loaderFile.load(
                        File3D,
                        function(gltf) {  
                                var model = gltf.scene;
                                //editor.removeObject(model);
                                model.position.y =0;
                                editor.addObject( model);
                            }
                        )
                     }
					}
				);
			//

			let timeout;

			function saveState() {

				if (editor.config.getKey('autosave') === false) {

					return;

				}

				clearTimeout(timeout);

				timeout = setTimeout(function () {

					editor.signals.savingStarted.dispatch();

					timeout = setTimeout(function () {

						//editor.storage.set(editor.toJSON());
						editor.storage.setObject(editor.toJSON(),IdModel);	
						editor.signals.savingFinished.dispatch();

					}, 100);

				}, 1000);

			}

			const signals = editor.signals;

			signals.geometryChanged.add(saveState);
			signals.objectAdded.add(saveState);
			signals.objectChanged.add(saveState);
			signals.objectRemoved.add(saveState);
			signals.materialChanged.add(saveState);
			signals.sceneBackgroundChanged.add(saveState);
			signals.sceneEnvironmentChanged.add(saveState);
			signals.sceneFogChanged.add(saveState);
			signals.sceneGraphChanged.add(saveState);
			signals.scriptChanged.add(saveState);
			signals.historyChanged.add(saveState);

		});

		//

		document.addEventListener('dragover', function (event) {

			event.preventDefault();
			event.dataTransfer.dropEffect = 'copy';

		});

		document.addEventListener('drop', function (event) {

			event.preventDefault();

			if (event.dataTransfer.types[0] === 'text/plain') return; // Outliner drop

			if (event.dataTransfer.items) {

				// DataTransferItemList supports folders

				editor.loader.loadItemList(event.dataTransfer.items);
			
			} else {

				editor.loader.loadFiles(event.dataTransfer.files);
			

			}

		});

		function onWindowResize() {

			editor.signals.windowResize.dispatch();

		}

		window.addEventListener('resize', onWindowResize);

		onWindowResize();

		

		let isLoadingFromHash = false;
		const hash = window.location.hash;
		

		if (hash.slice(1, 6) === 'file=') {

			const file = hash.slice(6);
			
			if (confirm('Any unsaved data will be lost. Are you sure?')) {

				const loader = new THREE.FileLoader();
				loader.crossOrigin = '';
				loader.load(file, function (text) {

					editor.clear();
					editor.fromJSON(JSON.parse(text));

				});

				isLoadingFromHash = true;

			}

		}

		// ServiceWorker

		if ('serviceWorker' in navigator) {

			try {

				navigator.serviceWorker.register('sw.js');

			} catch (error) {

			}

		}

	</script>